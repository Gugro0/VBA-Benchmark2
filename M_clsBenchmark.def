Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'---------------------------------------------------------------------------------------
' Module    : clsBenchmark
' Author    : K.Gundermann
' Date      : 01.07.2012
' Purpose   : Benchmarks your Code
'             Create a Class with some Sub's
'             For Running a single Benchmark:
'               Benchmark.Run(New clsMyBenchmark).Report
'             For running several Benchmarks:
'               Benchmark.RunClasses("clsMyBenchmark clsOtherBench").Report
' Updates    : 30.07.12 Changed to Timeout Model
'              02.10.12 Code cleanup + Setup/Teardown methods
'              26.02.14 moved from timeGetTime to clsStopwatch for higher resolution
'---------------------------------------------------------------------------------------

Option Compare Database
Option Explicit

Private Const DEFAULT_TIMEOUT = 200     ' ms
Private Const MINIMUM_ITERATIONS = 1
Private Const FACTORY_NAME = "__Bench_Factory"
Private Const FACTORY_PROC_NAME = "GetBenchClass"

Private c_ClassName     As String
Private c_Results       As clsBenchmark_Results
Private c_MinIterations As Long
Private c_Timeout       As Long
Private c_BaseDuration  As Long
Private c_Overhead      As Currency


Private Sub Class_Initialize()
  Set c_Results = New clsBenchmark_Results
  c_MinIterations = MINIMUM_ITERATIONS
  c_Timeout = DEFAULT_TIMEOUT
End Sub

Public Sub EmptySub()
End Sub

' ----------------------------------------------------------------------------------
' --- Properties
' ----------------------------------------------------------------------------------

Public Property Get Timeout() As Long
  Timeout = c_Timeout
End Property
Public Property Let Timeout(ByVal ms As Long)
  c_Timeout = ms
End Property
Public Function SetTimeout(ByVal ms As Long) As clsBenchmark
  Me.Timeout = ms
  Set SetTimeout = Me
End Function

Public Property Get MinIterations() As Long
  MinIterations = c_MinIterations
End Property
Public Property Let MinIterations(ByVal TheValue As Long)
  c_MinIterations = TheValue
End Property
Public Function SetMinIterations(ByVal TheValue As Long) As clsBenchmark
  Me.MinIterations = TheValue
  Set SetMinIterations = Me
End Function

Public Property Get TestCount() As Integer
  TestCount = c_Results.Count
End Property

Public Property Get Results() As clsBenchmark_Results
  Set Results = c_Results
End Property

Public Property Get Title() As String
  Title = "Running Benchmark " & c_ClassName & " " & Now
End Property

' ----------------------------------------------------------------------------------
' --- Methods / Functions
' ----------------------------------------------------------------------------------

Public Function Run(ByVal BenchmarkClass As Variant, Optional ByVal Timeout As Long = 0) As clsBenchmark
  Dim objBench  As Object
  Dim miMethod  As TLI.MemberInfo
  
  If Timeout > 0 Then Me.Timeout = Timeout
  
  If VarType(BenchmarkClass) = vbObject Then
    Set objBench = BenchmarkClass
  ElseIf VarType(BenchmarkClass) = vbString Then
    Set objBench = GetClassObj(BenchmarkClass)
  Else
    Err.Raise vbObject, , "Unknown Class Description: " & BenchmarkClass
    Exit Function
  End If
  If objBench Is Nothing Then Exit Function
    
  With ObjectInfo(objBench)
    c_ClassName = .ObjectName
    If .AllMembers.Count > 0 Then
      Call Calibrate
      For Each miMethod In .AllMembers
        If miMethod.InvokeKind = INVOKE_FUNC Then
          Call Run_SingleMethod(objBench, miMethod.Name)
        End If
      Next
    End If
  End With
  Set Run = Me
End Function



Public Function Report() As String
  
  Report = Me.Title & vbCrLf & Me.Results.Report
  
End Function

' ----------------------------------------------------------------------------------

' Create a Factory and the Create an Object of the Class with the Benchmark code
Private Function GetClassObj(ByVal Classname As String) As Object
  If CreateFactory(Classname) Then
    Set GetClassObj = Application.Run(FACTORY_PROC_NAME)
  End If
End Function

Private Function CreateFactory(ByVal Classname As String) As Boolean
  Dim VBKomp As VBComponent
  Dim str As String
  
  str = str & "Public Function " & FACTORY_PROC_NAME & " as " & Classname & vbCrLf
  str = str & "  Set " & FACTORY_PROC_NAME & " = New " & Classname & vbCrLf
  str = str & "End Function" & vbCrLf
  
  With MainApp_Project
    On Error Resume Next
      Set VBKomp = .VBComponents.Item(Classname)
      If Err = 9 Then
        On Error GoTo 0
        Err.Raise 9, , "Can not find Benchmark Class " & Classname
        Exit Function
      End If
    On Error GoTo 0
  End With
  
  DestroyFactory
  With MainApp_Project
    Set VBKomp = .VBComponents.Add(vbext_ct_StdModule)
    VBKomp.Name = FACTORY_NAME
    VBKomp.CodeModule.AddFromString str
  End With
      
  CreateFactory = True
End Function

Private Function MainApp_Project() As VBProject
  Static proj As VBProject
  
  If proj Is Nothing Then
    For Each proj In Application.VBE.VBProjects
      If proj.FileName = Application.CurrentProject.FullName Then Exit For
    Next
  End If
  Set MainApp_Project = proj
    
End Function

Private Sub DestroyFactory()
  On Error Resume Next
    With MainApp_Project
      .VBComponents.Remove .VBComponents(FACTORY_NAME)
    End With
  On Error GoTo 0
End Sub


Private Sub Run_SingleMethod(ByVal TheClass As Object, ByVal MethodName As String)
  Dim cTimeUsed As Currency
  Dim lCount As Long
  
  If MethodName = "Setup" Then Exit Sub
  If MethodName = "Teardown" Then Exit Sub
      
  Do While True
    With ObjectInfo(TheClass)
      If .HasFunction("Setup") Then Call .CallFunction("Setup", MethodName)
    End With
    
    lCount = lCount + 1
    With StopWatch
      Call TLI.InvokeHook(TheClass, MethodName, INVOKE_FUNC)
      cTimeUsed = cTimeUsed + .Elapsedms
    End With
    With ObjectInfo(TheClass)
      If .HasFunction("Teardown") Then Call .CallFunction("Teardown", MethodName)
    End With
    
    If (Me.MinIterations > 0) And (lCount >= Me.MinIterations) Then Exit Do
    If (Me.Timeout > 0) And (cTimeUsed > Me.Timeout) Then Exit Do
  Loop
  
  Call c_Results.Add(MethodName, lCount, cTimeUsed - (lCount * c_Overhead))
  
End Sub

Private Sub Calibrate()
  With StopWatch
      Call TLI.InvokeHook(Me, "EmptySub", INVOKE_FUNC)
      c_Overhead = .Elapsedms
  End With
End Sub


Private Sub Class_Terminate()
  DestroyFactory
  Set c_Results = Nothing
End Sub