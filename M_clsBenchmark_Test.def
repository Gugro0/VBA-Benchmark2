Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Compare Text
Option Explicit

'AccUnit:TestClass
Dim objBenchmark As clsBenchmark

' AccUnit infrastructure for advanced AccUnit features. Do not remove these lines.
Implements SimplyVBUnit.ITestFixture
Implements AccUnit_Integration.ITestManagerBridge
Private TestManager As AccUnit_Integration.TestManager
Private Sub ITestManagerBridge_InitTestManager(ByVal NewTestManager As AccUnit_Integration.ITestManagerComInterface): Set TestManager = NewTestManager: End Sub
Private Function ITestManagerBridge_GetTestManager() As AccUnit_Integration.ITestManagerComInterface: Set ITestManagerBridge_GetTestManager = TestManager: End Function
Private Sub ITestFixture_AddTestCases(ByVal Tests As SimplyVBUnit.TestCaseCollector): TestManager.AddTestCases Tests: End Sub

'--------------------------------------------------------------------
' Tests
'--------------------------------------------------------------------
Public Sub Setup()
  Set objBenchmark = New clsBenchmark
End Sub


' AccUnit:Tags(Example, Simple Test)
Public Sub CreateBenchmark_withClass_has4Tests()
  
  ' Act
  objBenchmark.Run New clsBench_Simple
  
  ' Assert
  Assert.That objBenchmark.TestCount, Iz.EqualTo(4)
End Sub

' AccUnit:Tags(Example, Simple Test)
Public Sub CreateBenchmark_withClass_hasTestname()
  ' Arrange
  
  ' Act
  objBenchmark.Run New clsBench_Simple
  
  ' Assert
  Assert.AreEqualStrings "clsBench_Simple->IntegerBenchmark", objBenchmark.Results.Test(1).Name
  Assert.AreEqualStrings "clsBench_Simple->LongBenchmark", objBenchmark.Results.Test(2).Name
  Assert.AreEqualStrings "clsBench_Simple->DoubleBenchmark", objBenchmark.Results.Test(3).Name
  Assert.AreEqualStrings "clsBench_Simple->CurrencyBenchmark", objBenchmark.Results.Test(4).Name
  
End Sub

Public Sub a_Testrun_needs_some_time()

  ' Act
  objBenchmark.Run New clsBench_Simple
  
  ' Assert
  Assert.That objBenchmark.Results.Test(1).Duration, Iz.GreaterThan(1)

End Sub

Public Sub a_Testrun_with_more_iteration_needs_more_time()

  ' Act
  objBenchmark.SetIterations(objBenchmark.Iterations * 10).Run New clsBench_Simple
  
  ' Assert
  Assert.That objBenchmark.Results.Test(1).Duration, Iz.GreaterThan(10)

End Sub

Public Sub we_have_a_TestResult()
  
  ' Act
  objBenchmark.Run New clsBench_Simple
  
  ' Assert
  With objBenchmark.Results.Test(1)
    Assert.That .Result, Text.Matches("clsBench_Simple->IntegerBenchmark .*[0-9]* msec .* ")
  End With
  
End Sub

Public Sub We_have_a_fastest_Test()
  ' Act
  objBenchmark.Run New clsBench_Simple
  ' Assert
  Assert.IsNotNothing objBenchmark.Results.Fastest
End Sub

Public Sub We_Have_a_TestReport()

  ' Act
  objBenchmark.Run New clsBench_Simple
  ' Assert
  Assert.That objBenchmark.Report, Iz.[Not].EqualTo("")
  Debug.Print objBenchmark.Report
End Sub

' ------------------------------------------------------------------------

Public Sub We_can_run_Tests_by_Name()
  ' Act
  objBenchmark.RunClasses "clsBench_Simple clsBench_Strings"
  
  ' Assert
  Assert.That objBenchmark.TestCount, Iz.EqualTo(5)
  Debug.Print objBenchmark.Report

End Sub